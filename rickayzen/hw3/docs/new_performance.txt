getLowerEqualSqrt(n): (O(sqrt(n)))
    if n == 0 or n == 1 (2 statements)
        return n (1 statement. if reached, it ends here)
    if n < 0 (1 statement)
        raise ValueException(f"The number must be greater than or equal to 0. Input was: {n}") (1 statement. If reached, it ends here)

    for i in range(2,n) : (~sqrt(n) iterations because i+1>sqrt(n) => (i+1)Â²>n) (sqrt(n) statements for check)
        if (i+1)**2 > n :  (1 statement)
            return i (1 statement. if reached, it ends here)
Total: 2 + 1 + (sqrt(n))*2+1 = O(sqrt(n))


getLowUpper(n): (O(sqrt(n)))
    low = getLowerEqualSqrt(n) (O(sqrt(n)))
    upper = low+1 (1 statement)
    if low == n: (1 statement)
        low -= 1 (1 statement)
    return low, upper (1 statement)
Total: O(sqrt(n)) + 3 = O(sqrt(n))


def mysqrt(n, error threshold=0.000000001) (O(sqrt(n)) + O(unknown))
    if n == 0 or n ==1: (2 statements)
        return n (1 statement. it reached, it ends here)
		
    lowOrEqual = getLowerEqualSqrt(n) (O(sqrt(n)))
    if lowOrEqual **2 == n : (1 statement)
        return lowOrEqual  (1 statement. If reached, it ends here)

    iteration = 0 (1 statement)

    minsqrt = lowOrEqual (1 statement)
    maxsqrt = minsqrt + 1 (1 statement)

    result = (minsqrt + maxsqrt) / 2.0 (1 statement)

    while abs(n - result ** 2) >= error_threshold (# iterations depend on threshold; unknown) (per iteration one statement because of check (and one final one that fails))

            if result ** 2 < n (1 statement)
                    minsqrt = result (1 statement)
            else :
                    maxsqrt = result (1 statement)
            result =  (minsqrt + maxsqrt) / 2.0 (1 statement)
            iteration +=1 (1 statement)

    return result (1 statement)
Total: 2 + O(sqrt(n)) + 5 + 5*O(unknown) = O(sqrt(n)) + O(unknown)
