isperfect(n) (O(n))
 if n is 0 or one there are two statements and therefore O(1)
    if n == 0 or n == 1:
        return (True, n)

 for i in range(2,n) (n-2 times)
        if i**2 == n (1 time)
            return True, i (1 time)
 return False, n (1 time)
Total: (n-2) * 1 + 1 = O(n)



getLowUpper(n) (O(n*sqrt(n)))
    i = 1 (1 statement)
    low = isperfect(n-i) (O(n))
    upper = isperfect(n+i) (O(n))

Calculations for runtime of two while loops:
	Let x² < n < (x+1)²
	Iterations of first while loop is n-x² and iterations of second while loop is (x+1)²-n
	Iterations total is iterations of first loop + iterations of second loop
	Iterations total: n-x² + x² + 2x + 1 - n = 2x + 1 ≈ 2*sqrt(n)
    while not low[0]: 
        i += 1 (1 statement)
        low = isperfect(n-i) (O(n))

    i = 1 (1 statement)
    while not upper[0]:
        i += 1
        upper = isperfect(n+i)

    minsqrt, maxsqrt = low[1], upper[1] (1 or 2 statements. Don't know how python handles it)
    return minsqrt, maxsqrt (1 statement)
Total: 1 + O(n)*2 + 2*sqrt(n)*(O(n) + 1 + 1 = O(n) + O(n*sqrt(n)) = O(n*sqrt(n))




mysqrt(n,  error threshold=0.000000001) (O(n*sqrt(n)) + O(unknown)
    if n == 0 or n ==1: (1 statement)
        return n  (1 statement, only if it ends here)
  #

    checkup = isperfect(n) (O(n))
    if checkup[0]  (1 statement)
        return checkup[1]  (1 statement, only if it ends here)
   

    iteration = 0 (1 statement)

    minsqrt, maxsqrt = getLowUpper(n) (O(n*sqrt(n)))

    result = (minsqrt + maxsqrt) / 2.0 (1 statement)

    while abs(n - result ** 2) >= error_threshold  (# iterations depend on threshold; unknown) (per iteration one statement because of check (and one final one that fails))

            if result ** 2 < n : (1 statement)
                    minsqrt = result (1 statement)
            else :
                    maxsqrt = result  (1 statement)
            result =  (minsqrt + maxsqrt) / 2.0  (1 statement)
            iteration +=1 (1 statement)

    return result  (1 statement)
    Total: 1 + O(n) + 1 + 1 + O(n*sqrt(n)) + 5*unknown = O(n*sqrt(n)) + O(unknown)
So it depends on the error threshold. if error threshold -> 0 then O(unknown) -> infinity
